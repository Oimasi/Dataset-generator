# -*- coding: utf-8 -*-
"""
Промпты для генерации простого датасета
"""

# Промпт для создания простой структуры
STRUCTURE_GENERATION_PROMPT = """Проанализируй запрос пользователя для создания датасета. На основе этого запроса создай JSON-структуру, которая будет использоваться для генерации данных.

Запрос пользователя:
"{description}"

Твоя задача — извлечь из запроса названия полей (ключей) и создать для них примеры значений.

Требования к JSON-структуре:
1.  Создай один главный объект.
2.  Внутри него создай ключ "fields", значением которого будет объект с описанием полей.
3.  Для каждого поля в "fields" укажи:
    - "type": "string" (или другой тип, если очевидно).
    - "description": краткое описание поля на русском языке.
    - "example": реалистичный пример значения (на английском или транслитом, если применимо).
4.  Ключи в JSON должны быть **переведены на английский язык**. Транслитерация запрещена, ОБЯЗАТЕЛЬНО переводи на английский язык (к пример, не mashina а car, не ot_kyda а from, для "название компании" используй `company_name`, не `nazvanie_kompanii`. Ключи должны быть в стиле lower_case_with_underscores и состоять не более чем из 3 слов, постарайся сжать название до 3 - 4 слов.
5.  Создай ключ "example_record", значением которого будет объект с примером одной полной записи, используя те же ключи и примеры, что и в "fields".

Пример для запроса "кошачьи породы: название, происхождение, характер":
{{
  "fields": {{
    "breed_name": {{
      "type": "string",
      "description": "Название породы кошки",
      "example": "siamese"
    }},
    "origin": {{
      "type": "string",
      "description": "Страна происхождения",
      "example": "Thailand"
    }},
    "temperament": {{
      "type": "string",
      "description": "Описание характера",
      "example": "energetic, social, demanding"
    }}
  }},
  "example_record": {{
    "breed_name": "siamese",
    "origin": "Thailand",
    "temperament": "energetic, social, demanding"
  }}
}}

Верни ТОЛЬКО валидный JSON без какого-либо дополнительного текста.

JSON:"""

# Промпт для генерации новых данных
DATA_GENERATION_PROMPT = """Создай новую запись JSON для темы: {description}

Используй точно такие же ключи: {keys}

Верни ТОЛЬКО JSON с новыми уникальными значениями:
{{
  {example_structure}
}}

Только JSON, без текста:"""

# Промпт для улучшенной генерации с контекстом
CONTEXTUAL_DATA_GENERATION_PROMPT = """Создай новую запись для датасета по теме: {description}

Поля:
{field_descriptions}

Пример структуры (создай ДРУГИЕ данные):
{example_record}

Верни ТОЛЬКО валидный JSON без дополнительного текста:
- Данные должны быть реалистичными
- Соответствовать теме: {description}
- НЕ копировать пример
- Проверь JSON синтаксис

JSON:"""

# Промпты для разных типов датасетов
DATASET_TYPE_PROMPTS = {
    "qa": """Создай пару вопрос-ответ:
- Вопрос должен быть конкретным и понятным
- Ответ должен быть информативным и полным
- Тематика: {description}""",
    
    "instruction": """Создай инструкцию с входными данными и результатом:
- Инструкция должна быть четкой и выполнимой
- Входные данные должны быть релевантными
- Результат должен соответствовать инструкции
- Тематика: {description}""",
    
    "dialog": """Создай диалог между участниками:
- Реплики должны быть естественными
- Диалог должен иметь логическую последовательность
- Учитывай роли участников
- Тематика: {description}""",
    
    "classification": """Создай данные для классификации:
- Текст должен четко относиться к указанной категории
- Категории должны быть различимыми
- Данные должны быть разнообразными
- Тематика: {description}"""
}

# Промпт для исправления невалидного JSON
JSON_REPAIR_PROMPT = """Исправь следующий JSON, сделав его валидным:

Исходный текст:
{broken_json}

Требования:
- Исправь синтаксические ошибки
- Сохрани исходный смысл и структуру
- Убери лишний текст, оставив только JSON
- Убедись, что все кавычки и скобки закрыты

Исправленный JSON:"""
